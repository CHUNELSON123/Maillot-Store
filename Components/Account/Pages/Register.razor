@page "/Account/Register"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MaillotStore.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Register</PageTitle>

<div class="account-container">
    <h1>Sign Up</h1>
    <hr />
    <StatusMessage Message="@errorMessage" />
    <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register" class="account-form">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.FullName" class="form-control" autocomplete="name" placeholder="John Doe" />
            <label for="fullname">Full Name</label>
            <ValidationMessage For="() => Input.FullName" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.PhoneNumber" class="form-control" autocomplete="tel" placeholder="123-456-7890" />
            <label for="phonenumber">Phone Number</label>
            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="name@example.com" />
            <label for="email">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Password" type="password" class="form-control" autocomplete="new-password" placeholder="password" />
            <label for="password">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>

        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.ConfirmPassword" type="password" class="form-control" autocomplete="new-password" placeholder="password" />
            <label for="confirm-password">Confirm Password</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>

        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="Input.AgreeToTerms" class="form-check-input" id="agree-to-terms" />
            <a href="/terms-and-conditions">
                <label class="form-check-label" for="agree-to-terms">
                    I agree to Terms and Conditions
                </label>
            </a>
            <ValidationMessage For="() => Input.AgreeToTerms" class="text-danger" />
        </div>

        <div class="d-grid">
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </div>

        <div class="account-links">
            <a href="/Account/Login">Already have an account? Login</a>
        </div>
    </EditForm>
</div>


@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Full Name")]
        public string FullName { get; set; } = "";

        [Required]
        [Phone]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required(ErrorMessage = "You must agree to the terms and conditions.")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms and conditions.")]
        public bool AgreeToTerms { get; set; }
    }

    public async Task RegisterUser()
    {
        var user = CreateUser();

        user.FullName = Input.FullName;
        user.PhoneNumber = Input.PhoneNumber;
        user.JoinedDate = DateTime.UtcNow;

        // --- Generate Referral Code ---
        var namePart = new string(Input.FullName.Where(char.IsLetter).ToArray()).ToUpper();
        namePart = namePart.Length > 4 ? namePart.Substring(0, 4) : namePart;
        var numberPart = new Random().Next(100, 1000).ToString();
        user.ReferralCode = $"{namePart}{numberPart}";

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (result.Succeeded)
        {
            Logger.LogInformation("User created a new account with password.");

            // 1. Ensure the "Influencer" role exists
            var roleExists = await RoleManager.RoleExistsAsync("Influencer");
            if (!roleExists)
            {
                await RoleManager.CreateAsync(new IdentityRole("Influencer"));
            }

            // 2. Add the user to the role
            await UserManager.AddToRoleAsync(user, "Influencer");

            // 3. Automatically log the new user in
            await SignInManager.SignInAsync(user, isPersistent: false);

            // 4. Redirect to the dashboard
            NavigationManager.NavigateTo("/influencer-dashboard", forceLoad: true);
        }
        else
        {
            errorMessage = $"Error: {string.Join(", ", result.Errors.Select(e => e.Description))}";
            StateHasChanged();
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor, or alternatively " +
                $"override the register page in /Components/Account/Pages/Register.razor");
        }
    }
}