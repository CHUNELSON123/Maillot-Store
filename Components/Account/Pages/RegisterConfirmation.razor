@page "/Account/RegisterConfirmation"
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MaillotStore.Data

@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Register confirmation</PageTitle>

<h1>Register confirmation</h1>

<StatusMessage Message="@statusMessage" />

<div>
    <p>
        This app does not currently have a real email sender registered.
        See <a href="https://aka.ms/aspnetcore-template-email-sender">these docs</a> for how to configure a real email sender.
    </p>
    @if (emailConfirmationLink is not null)
    {
        <p>
            Normally this would be emailed: <a href="@emailConfirmationLink">Click here to confirm your account</a>
        </p>
    }
    else
    {
        <p>
            Please check your email to confirm your account.
        </p>
    }
</div>

@code {
    private string? statusMessage;
    private string? emailConfirmationLink;

    [SupplyParameterFromQuery]
    public string? Email { get; set; }

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            statusMessage = "Error: Email address not provided.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            statusMessage = "Error finding user for email.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").ToString(),
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
    }
}