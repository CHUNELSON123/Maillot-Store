@inject NavigationManager NavigationManager
@implements IDisposable

<div class="admin-sidebar">
    <nav class="admin-nav">
        <a href="/admin/dashboard" class="@GetNavLinkClass("/admin/dashboard")">
            Dashboard
        </a>
        <a href="/admin/products" class="@GetNavLinkClass("/admin/products")">
            Products
        </a>
        <a href="/admin/orders" class="@GetNavLinkClass("/admin/orders")">
            Orders
        </a>
        <a href="/admin/influencers" class="@GetNavLinkClass("/admin/influencers")">
            Influencers
        </a>
        <a href="/admin/commissions" class="@GetNavLinkClass("/admin/commissions")">
            Commission
        </a>
        
        @* --- THIS SECTION IS UPDATED --- *@
        <form action="/Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="returnUrl" value="/" />
            <button type="submit" class="nav-link btn btn-link">Logout</button>
        </form>
    </nav>
</div>

@code {
    protected override void OnInitialized()
    {
        // This tells the component to listen for URL changes
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private string GetNavLinkClass(string navLink)
    {
        // Use Contains for a more robust check that handles child pages
        if (NavigationManager.Uri.Contains(navLink, StringComparison.OrdinalIgnoreCase))
        {
            return "nav-link active";
        }

        // Special case for the dashboard link, which might be the root of the admin section
        if (navLink == "/admin/dashboard" && NavigationManager.Uri.EndsWith("/admin"))
        {
            return "nav-link active";
        }

        return "nav-link";
    }

    // This method is called when the URL changes
    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        // This forces the component to re-render and update the active link
        StateHasChanged();
    }

    // This cleans up the event subscription to prevent memory leaks
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}