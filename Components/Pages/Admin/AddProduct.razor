@page "/admin/add-product"
@using MaillotStore.Components.Layout
@using MaillotStore.Models
@using MaillotStore.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.ComponentModel.DataAnnotations
@using MaillotStore.Models.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@layout AdminLayout
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject ILogger<AddProduct> Logger
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Add Product</PageTitle>

<div class="add-product-container">
    <div class="add-product-header">
        <h1>Add New Product</h1>
        <button class="back-btn" @onclick='() => NavigationManager.NavigateTo("/admin/products")'>Back</button>
    </div>

    <div class="add-product-form-body">
        <EditForm Model="@productViewModel" OnValidSubmit="HandleValidSubmit" enctype="multipart/form-data">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="productName">Product Name:</label>
                <InputText id="productName" class="form-control-dark" @bind-Value="productViewModel.Name" />
                <ValidationMessage For="@(() => productViewModel.Name)" />
            </div>

            <div class="form-group">
                <label for="productPrice">Price:</label>
                <InputNumber id="productPrice" class="form-control-dark" @bind-Value="productViewModel.Price" />
                <ValidationMessage For="@(() => productViewModel.Price)" />
            </div>

            <div class="form-group">
                <label for="productCategory">Category:</label>
                <InputSelect id="productCategory" class="form-control-dark" @bind-Value="productViewModel.Category">
                    <option value="">Select Category</option>
                    <option value="Football">Football</option>
                    <option value="Basketball">Basketball</option>
                    <option value="NFL">NFL</option>
                </InputSelect>
                <ValidationMessage For="@(() => productViewModel.Category)" />
            </div>

            <div class="form-group">
                <label for="jerseySeason">Jersey Season:</label>
                <div class="season-inputs">
                    <InputSelect class="form-control-dark" @bind-Value="productViewModel.SeasonType">
                        <option value="">Select Type</option>
                        <option value="HOME">HOME</option>
                        <option value="AWAY">AWAY</option>
                        <option value="THIRD">THIRD</option>
                    </InputSelect>
                    <InputSelect class="form-control-dark" @bind-Value="productViewModel.SeasonYear">
                        <option value="">Select Year</option>
                        @foreach (var year in SeasonYears)
                        {
                            <option value="@year">@year</option>
                        }
                    </InputSelect>
                </div>
            </div>

            <div class="form-group">
                <label for="stockQuantity">Stock Quantity:</label>
                <InputNumber id="stockQuantity" class="form-control-dark" @bind-Value="productViewModel.Stock" />
            </div>

            <div class="form-group">
                <label for="productDescription">Description:</label>
                <InputTextArea id="productDescription" class="form-control-dark" rows="5" @bind-Value="productViewModel.Description" />
            </div>

            <div class="form-group">
                <label>Image URLs (Optional):</label>
                <div class="input-row">
                    @* --- START: PREVIEW AND INPUT FOR URL 1 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(imageUrlPreviews[0]))
                        {
                            <img src="@imageUrlPreviews[0]" class="inline-preview" />
                        }
                        <InputText placeholder="Image URL 1" class="form-control-dark" @bind-Value="productViewModel.ImageUrl1" @oninput="(e) => UpdateUrlPreview(e, 0)" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR URL 1 --- *@

                    @* --- START: PREVIEW AND INPUT FOR URL 2 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(imageUrlPreviews[1]))
                        {
                            <img src="@imageUrlPreviews[1]" class="inline-preview" />
                        }
                        <InputText placeholder="Image URL 2" class="form-control-dark" @bind-Value="productViewModel.ImageUrl2" @oninput="(e) => UpdateUrlPreview(e, 1)" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR URL 2 --- *@

                    @* --- START: PREVIEW AND INPUT FOR URL 3 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(imageUrlPreviews[2]))
                        {
                            <img src="@imageUrlPreviews[2]" class="inline-preview" />
                        }
                        <InputText placeholder="Image URL 3" class="form-control-dark" @bind-Value="productViewModel.ImageUrl3" @oninput="(e) => UpdateUrlPreview(e, 2)" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR URL 3 --- *@
                </div>
            </div>

            <div class="form-group">
                <label>Or Upload Images From PC (Max 3):</label>
                <div class="input-row">
                    @* --- START: PREVIEW AND INPUT FOR FILE 1 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(filePreviews[0]))
                        {
                            <img src="@filePreviews[0]" class="inline-preview" />
                        }
                        <InputFile OnChange="@(e => LoadFile(e, 0))" class="form-control-file" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR FILE 1 --- *@

                    @* --- START: PREVIEW AND INPUT FOR FILE 2 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(filePreviews[1]))
                        {
                            <img src="@filePreviews[1]" class="inline-preview" />
                        }
                        <InputFile OnChange="@(e => LoadFile(e, 1))" class="form-control-file" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR FILE 2 --- *@

                    @* --- START: PREVIEW AND INPUT FOR FILE 3 --- *@
                    <div class="image-input-container">
                        @if (!string.IsNullOrEmpty(filePreviews[2]))
                        {
                            <img src="@filePreviews[2]" class="inline-preview" />
                        }
                        <InputFile OnChange="@(e => LoadFile(e, 2))" class="form-control-file" />
                    </div>
                    @* --- END: PREVIEW AND INPUT FOR FILE 3 --- *@
                </div>
            </div>

            <div class="form-group featured-group">
                <label>Featured:</label>
                <div class="featured-options">
                    <InputRadioGroup @bind-Value="productViewModel.IsFeatured">
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="featuredYes" Value="true" />
                            <label class="form-check-label" for="featuredYes">Yes</label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="featuredNo" Value="false" />
                            <label class="form-check-label" for="featuredNo">No</label>
                        </div>
                    </InputRadioGroup>
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn-saved">Save</button>
                <button type="button" class="btn-cancel" @onclick='() => NavigationManager.NavigateTo("/admin/products")'>Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ProductViewModel productViewModel = new();
    private List<IBrowserFile> loadedFiles = new(new IBrowserFile[3]);
    private string[] imageUrlPreviews = new string[3];
    private string[] filePreviews = new string[3];
    private List<string> SeasonYears { get; set; } = new();
    private const long MaxFileSize = 1024 * 1024 * 5; // 5MB limit

    protected override void OnInitialized()
    {
        int startYear = 2014;
        int currentYear = DateTime.Now.Year;
        for (int year = startYear; year <= currentYear; year++)
        {
            SeasonYears.Add($"{year}/{year + 1}");
        }
        SeasonYears.Reverse();
    }

    // --- START OF UPDATED LoadFile METHOD ---
    private async Task LoadFile(InputFileChangeEventArgs e, int index)
    {
        try
        {
            // Store the full file reference for later saving
            loadedFiles[index] = e.File;

            if (e.File != null)
            {
                // Check the size *before* doing anything
                if (e.File.Size > MaxFileSize)
                {
                    Logger.LogWarning($"File '{e.File.Name}' exceeds {MaxFileSize} byte limit. Preview aborted.");
                    loadedFiles[index] = null; // Clear the file
                    filePreviews[index] = null; // Clear the preview
                    return;
                }

                // --- THIS IS THE FIX ---
                // Request a small, resized image preview from the browser
                // instead of loading the entire file into memory.
                // This prevents the TimeoutException.
                var resizedImage = await e.File.RequestImageFileAsync(e.File.ContentType, 150, 150); // 150x150 preview

                // Only read the small preview's bytes
                var buffer = new byte[resizedImage.Size];
                await resizedImage.OpenReadStream().ReadAsync(buffer);

                var base64Image = Convert.ToBase64String(buffer);
                filePreviews[index] = $"data:{e.File.ContentType};base64,{base64Image}";
            }
        }
        catch (Exception ex)
        {
            // Catch any error during preview generation (e.g., file isn't an image)
            Logger.LogError(ex, $"Error generating preview for file '{e.File?.Name}'.");
            loadedFiles[index] = null;
            filePreviews[index] = null;
        }
    }
    // --- END OF UPDATED LoadFile METHOD ---

    private void UpdateUrlPreview(ChangeEventArgs e, int index)
    {
        imageUrlPreviews[index] = e.Value.ToString();
    }

    private async Task HandleValidSubmit()
    {
        var newProduct = new Product
        {
            Name = productViewModel.Name,
            Price = productViewModel.Price,
            Category = productViewModel.Category,
            Stock = productViewModel.Stock,
            Description = productViewModel.Description,
            IsFeatured = productViewModel.IsFeatured,
            Season = $"{productViewModel.SeasonType} ({productViewModel.SeasonYear})"
        };

        var uploadedImageUrls = new List<string>(new string[3]);
        var uploadPath = Path.Combine(Environment.WebRootPath, "Images", "products");
        Directory.CreateDirectory(uploadPath);

        try
        {
            for (int i = 0; i < loadedFiles.Count; i++)
            {
                var file = loadedFiles[i];
                if (file != null)
                {
                    // This is where we check the size *again* before saving
                    if (file.Size > MaxFileSize)
                    {
                        Logger.LogWarning($"File '{file.Name}' at index {i} is too large and was skipped.");
                        continue; // Skip this file
                    }

                    var uniqueFileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var path = Path.Combine(uploadPath, uniqueFileName);

                    await using FileStream fs = new(path, FileMode.Create);
                    // Stream the full file (up to 5MB) to the server disk
                    await file.OpenReadStream(maxAllowedSize: MaxFileSize).CopyToAsync(fs);

                    uploadedImageUrls[i] = $"/Images/products/{uniqueFileName}";
                }
            }
        }
        catch (Exception ex)
        {
            // This will catch any error during the *save* process
            Logger.LogError(ex, "Error occurred while saving images. Check file size limits and permissions.");
            return;
        }

        newProduct.ImageUrl = !string.IsNullOrEmpty(uploadedImageUrls[0]) ? uploadedImageUrls[0] : productViewModel.ImageUrl1;
        newProduct.ImageUrl2 = !string.IsNullOrEmpty(uploadedImageUrls[1]) ? uploadedImageUrls[1] : productViewModel.ImageUrl2;
        newProduct.ImageUrl3 = !string.IsNullOrEmpty(uploadedImageUrls[2]) ? uploadedImageUrls[2] : productViewModel.ImageUrl3;

        DbContext.Products.Add(newProduct);
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/products");
    }
}