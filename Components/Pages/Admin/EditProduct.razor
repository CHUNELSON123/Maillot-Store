@page "/admin/edit-product/{ProductId:int}"
@using MaillotStore.Components.Layout
@using MaillotStore.Models
@using MaillotStore.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using MaillotStore.Models.ViewModels
@using Microsoft.AspNetCore.Components.Forms
@layout AdminLayout
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@inject ILogger<EditProduct> Logger
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit Product</PageTitle>

<div class="add-product-container">
    <div class="add-product-header">
        <h1>Edit Product</h1>
        <button class="back-btn" @onclick='() => NavigationManager.NavigateTo("/admin/products")'>Back</button>
    </div>

    <div class="add-product-form-body">
        @if (productViewModel == null)
        {
            <p><em>Loading product...</em></p>
        }
        else
        {
            <EditForm Model="@productViewModel" OnValidSubmit="HandleUpdateSubmit" enctype="multipart/form-data">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="productName">Product Name:</label>
                    <InputText id="productName" class="form-control-dark" @bind-Value="productViewModel.Name" />
                    <ValidationMessage For="@(() => productViewModel.Name)" />
                </div>

                <div class="form-group">
                    <label for="productPrice">Price:</label>
                    <InputNumber id="productPrice" class="form-control-dark" @bind-Value="productViewModel.Price" />
                    <ValidationMessage For="@(() => productViewModel.Price)" />
                </div>

                <div class="form-group">
                    <label for="productCategory">Category:</label>
                    <InputSelect id="productCategory" class="form-control-dark" @bind-Value="productViewModel.Category">
                        <option value="">Select Category</option>
                        <option value="Football">Football</option>
                        <option value="Basketball">Basketball</option>
                        <option value="NFL">NFL</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => productViewModel.Category)" />
                </div>

                <div class="form-group">
                    <label for="jerseySeason">Jersey Season:</label>
                    <div class="season-inputs">
                        <InputSelect class="form-control-dark" @bind-Value="productViewModel.SeasonType">
                            <option value="">Select Type</option>
                            <option value="HOME">HOME</option>
                            <option value="AWAY">AWAY</option>
                            <option value="THIRD">THIRD</option>
                        </InputSelect>
                        <InputSelect class="form-control-dark" @bind-Value="productViewModel.SeasonYear">
                            <option value="">Select Year</option>
                            @foreach (var year in SeasonYears)
                            {
                                <option value="@year">@year</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="form-group">
                    <label for="stockQuantity">Stock Quantity:</label>
                    <InputNumber id="stockQuantity" class="form-control-dark" @bind-Value="productViewModel.Stock" />
                </div>

                <div class="form-group">
                    <label for="productDescription">Description:</label>
                    <InputTextArea id="productDescription" class="form-control-dark" rows="5" @bind-Value="productViewModel.Description" />
                </div>

                <div class="form-group">
                    <label>Image URLs (Optional):</label>
                    <div class="input-row">
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(imageUrlPreviews[0]))
                            {
                                <img src="@imageUrlPreviews[0]" class="inline-preview" />
                            }
                            <InputText placeholder="Image URL 1" class="form-control-dark" @bind-Value="productViewModel.ImageUrl1" @oninput="(e) => UpdateUrlPreview(e, 0)" />
                        </div>
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(imageUrlPreviews[1]))
                            {
                                <img src="@imageUrlPreviews[1]" class="inline-preview" />
                            }
                            <InputText placeholder="Image URL 2" class="form-control-dark" @bind-Value="productViewModel.ImageUrl2" @oninput="(e) => UpdateUrlPreview(e, 1)" />
                        </div>
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(imageUrlPreviews[2]))
                            {
                                <img src="@imageUrlPreviews[2]" class="inline-preview" />
                            }
                            <InputText placeholder="Image URL 3" class="form-control-dark" @bind-Value="productViewModel.ImageUrl3" @oninput="(e) => UpdateUrlPreview(e, 2)" />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label>Or Upload Images From PC (Max 3):</label>
                    <div class="input-row">
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(filePreviews[0]))
                            {
                                <img src="@filePreviews[0]" class="inline-preview" />
                            }
                            <InputFile OnChange="@(e => LoadFile(e, 0))" class="form-control-file" />
                        </div>
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(filePreviews[1]))
                            {
                                <img src="@filePreviews[1]" class="inline-preview" />
                            }
                            <InputFile OnChange="@(e => LoadFile(e, 1))" class="form-control-file" />
                        </div>
                        <div class="image-input-container">
                            @if (!string.IsNullOrEmpty(filePreviews[2]))
                            {
                                <img src="@filePreviews[2]" class="inline-preview" />
                            }
                            <InputFile OnChange="@(e => LoadFile(e, 2))" class="form-control-file" />
                        </div>
                    </div>
                </div>

                <div class="form-group featured-group">
                    <label>Featured:</label>
                    <div class="featured-options">
                        <InputRadioGroup @bind-Value="productViewModel.IsFeatured">
                            <div class="form-check">
                                <InputRadio class="form-check-input" id="featuredYes" Value="true" />
                                <label class="form-check-label" for="featuredYes">Yes</label>
                            </div>
                            <div class="form-check">
                                <InputRadio class="form-check-input" id="featuredNo" Value="false" />
                                <label class="form-check-label" for="featuredNo">No</label>
                            </div>
                        </InputRadioGroup>
                    </div>
                </div>

                <div class="form-actions">
                    <button type="submit" class="btn-saved">Update</button>
                    <button type="button" class="btn-cancel" @onclick='() => NavigationManager.NavigateTo("/admin/products")'>Cancel</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private ProductViewModel? productViewModel;
    private List<IBrowserFile> loadedFiles = new(new IBrowserFile[3]);
    private string[] imageUrlPreviews = new string[3];
    private string[] filePreviews = new string[3];
    private List<string> SeasonYears { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        int startYear = 2014;
        int currentYear = DateTime.Now.Year;
        for (int year = startYear; year <= currentYear; year++)
        {
            SeasonYears.Add($"{year}/{year + 1}");
        }
        SeasonYears.Reverse();

        var product = await DbContext.Products.FindAsync(ProductId);

        if (product != null)
        {
            productViewModel = new ProductViewModel
            {
                Name = product.Name,
                Price = product.Price,
                Category = product.Category,
                Stock = product.Stock,
                Description = product.Description,
                IsFeatured = product.IsFeatured,
                ImageUrl1 = product.ImageUrl,
                ImageUrl2 = product.ImageUrl2,
                ImageUrl3 = product.ImageUrl3
            };

            // Pre-fill URL previews with existing images
            imageUrlPreviews[0] = product.ImageUrl;
            imageUrlPreviews[1] = product.ImageUrl2;
            imageUrlPreviews[2] = product.ImageUrl3;

            if (!string.IsNullOrEmpty(product.Season) && product.Season.Contains(" (") && product.Season.EndsWith(")"))
            {
                var parts = product.Season.Split(new[] { " (" }, StringSplitOptions.None);
                if (parts.Length == 2)
                {
                    productViewModel.SeasonType = parts[0];
                    productViewModel.SeasonYear = parts[1].TrimEnd(')');
                }
            }
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e, int index)
    {
        loadedFiles[index] = e.File;
        if (e.File != null)
        {
            var buffer = new byte[e.File.Size];
            await e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 5).ReadAsync(buffer); // Limit to 5MB
            var base64Image = Convert.ToBase64String(buffer);
            filePreviews[index] = $"data:{e.File.ContentType};base64,{base64Image}";
            imageUrlPreviews[index] = string.Empty; // Clear URL preview if a file is uploaded
        }
    }

    private void UpdateUrlPreview(ChangeEventArgs e, int index)
    {
        imageUrlPreviews[index] = e.Value.ToString();
        filePreviews[index] = string.Empty; // Clear file preview if a URL is entered
    }

    private async Task HandleUpdateSubmit()
    {
        var productToUpdate = await DbContext.Products.FindAsync(ProductId);
        if (productToUpdate == null || productViewModel == null)
        {
            return;
        }

        productToUpdate.Name = productViewModel.Name;
        productToUpdate.Price = productViewModel.Price;
        productToUpdate.Category = productViewModel.Category;
        productToUpdate.Stock = productViewModel.Stock;
        productToUpdate.Description = productViewModel.Description;
        productToUpdate.IsFeatured = productViewModel.IsFeatured;
        productToUpdate.Season = $"{productViewModel.SeasonType} ({productViewModel.SeasonYear})";

        var uploadedImageUrls = new List<string>(new string[3]);
        for (int i = 0; i < loadedFiles.Count; i++)
        {
            var file = loadedFiles[i];
            if (file != null)
            {
                var path = Path.Combine(Environment.WebRootPath, "Images", "products", file.Name);
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(file.Size).CopyToAsync(fs);
                uploadedImageUrls[i] = $"/Images/products/{file.Name}";
            }
        }

        productToUpdate.ImageUrl = !string.IsNullOrEmpty(uploadedImageUrls[0]) ? uploadedImageUrls[0] : productViewModel.ImageUrl1;
        productToUpdate.ImageUrl2 = !string.IsNullOrEmpty(uploadedImageUrls[1]) ? uploadedImageUrls[1] : productViewModel.ImageUrl2;
        productToUpdate.ImageUrl3 = !string.IsNullOrEmpty(uploadedImageUrls[2]) ? uploadedImageUrls[2] : productViewModel.ImageUrl3;

        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/admin/products");
    }
}