@page "/admin/products"
@using MaillotStore.Components.Layout
@using MaillotStore.Models
@using MaillotStore.Data
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@layout AdminLayout
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Products</PageTitle>

<div class="product-container">
    <div class="product-header">
        <h1>Product List</h1>
        <a href="/admin/add-product">
            <button class="add-btn">
                <span class="plus-icon">+</span>
            </button>
        </a>
    </div>

    <div class="product-table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>S/N</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (pagedProducts != null && pagedProducts.Any())
                {
                    @foreach (var (product, index) in pagedProducts.Select((p, i) => (p, i)))
                    {
                        <tr>
                            <td>@((currentPage - 1) * pageSize + index + 1)</td>
                            <td>@TruncateName(product.Name, 30)</td>
                            <td>FCFA @product.Price.ToString("N0") XAF</td>
                            <td>@product.Stock</td>
                            <td class="action-buttons">
                                <button class="edit-btn" @onclick='() => NavigationManager.NavigateTo($"/admin/edit-product/{product.ProductId}")'>Edit</button>
                                <button class="delete-btn" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No products found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @* --- PAGINATION --- *@
    <div class="pagination">
        @for (int i = 1; i <= totalPages; i++)
        {
            var pageNumber = i;
            <button class="@(pageNumber == currentPage ? "active" : "")" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
        }
    </div>
</div>

@code {
    private List<Product> allProducts = new();
    private List<Product> pagedProducts = new();
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        allProducts = await DbContext.Products.OrderBy(p => p.Name).ToListAsync();
        totalPages = (int)Math.Ceiling(allProducts.Count / (double)pageSize);
        UpdatePagedProducts();
    }

    private void UpdatePagedProducts()
    {
        pagedProducts = allProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > totalPages)
        {
            return;
        }
        currentPage = pageNumber;
        UpdatePagedProducts();
    }

    private async Task DeleteProduct(int productId)
    {
        var product = await DbContext.Products.FindAsync(productId);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            await LoadProducts(); // Reload all products to refresh the list and pagination
        }
    }

    private string TruncateName(string name, int maxLength)
    {
        if (string.IsNullOrEmpty(name))
        {
            return string.Empty;
        }

        if (name.Length <= maxLength)
        {
            return name;
        }

        return name.Substring(0, maxLength) + "...";
    }
}