@page "/admin/products"
@using MaillotStore.Components.Layout
@using MaillotStore.Models
@using MaillotStore.Data
@using Microsoft.EntityFrameworkCore
@layout AdminLayout
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<PageTitle>Products</PageTitle>

<div class="product-container">
    <div class="product-header">
        <h1>Product List</h1>
        <a href="/admin/add-product">
            <button class="add-btn">
                <span class="plus-icon">+</span>
            </button>
        </a>
    </div>

    <div class="product-table-container">
        <table class="table">
            <thead>
                <tr>
                    <th>S/N</th>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (products != null)
                {
                    @foreach (var (product, index) in products.Select((p, i) => (p, i + 1)))
                    {
                        <tr>
                            <td>@index</td>
                            <td>@TruncateName(product.Name, 30)</td>
                            <td>@product.Price.ToString("C")</td>
                            <td>@product.Stock</td>
                            <td class="action-buttons">
                                <button class="edit-btn" @onclick='() => NavigationManager.NavigateTo($"/admin/edit-product/{product.ProductId}")'>Edit</button>
                                <button class="delete-btn" @onclick="() => DeleteProduct(product.ProductId)">Delete</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        products = await DbContext.Products.ToListAsync();
    }

    private async Task DeleteProduct(int productId)
    {
        var product = await DbContext.Products.FindAsync(productId);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            products.Remove(product);
            StateHasChanged();
        }
    }

    private string TruncateName(string name, int maxLength)
    {
        if (string.IsNullOrEmpty(name))
        {
            return string.Empty;
        }

        if (name.Length <= maxLength)
        {
            return name;
        }

        return name.Substring(0, maxLength) + "...";
    }
}