@page "/checkout"
@using MaillotStore.Data
@using MaillotStore.Models
@using MaillotStore.Services
@using Microsoft.EntityFrameworkCore
@using System.Text
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext DbContext
@inject ReferralService ReferralService
@inject OrderStateService OrderStateService
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>Checkout</PageTitle>

<div class="container my-5">
    <div class="checkout-container">
        <h1 class="text-center mb-4">Check Out</h1>

        @* --- YOUR ORDER SUMMARY (HTML is unchanged) --- *@
        <div class="order-summary mb-5">
            <h2 class="mb-3">Your Order Summary</h2>

            @if (orderItems.Any())
            {
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th scope="col">Product</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Price</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in orderItems)
                        {
                            <tr>
                                <td data-label="Product">
                                    <div class="d-flex align-items-center">
                                        <img src="@item.Product.ImageUrl" alt="@item.Product.Name" class="img-fluid me-3" style="width: 50px;">
                                        <div>
                                            <strong>@item.Product.Name</strong><br>

                                            @* --- START: UPDATED --- *@
                                            <div class="d-flex align-items-center mt-1">
                                                <span class="text-muted me-2">Size:</span>
                                                <select class="form-select form-select-sm bg-dark text-white" style="width: 80px;"
                                                        @onchange="(e) => UpdateSize(item, e)">
                                                    @foreach (var size in availableSizes)
                                                    {
                                                        <option value="@size" selected="@(size == item.Size)">@size</option>
                                                    }
                                                </select>
                                            </div>
                                            @* --- END: UPDATED --- *@

                                            @if (!string.IsNullOrEmpty(item.CustomName) || item.CustomNumber.HasValue)
                                            {
                                                <div class="customization-display">
                                                    <small><em>Custom: @item.CustomName, #@item.CustomNumber</em></small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td data-label="Quantity">
                                    <div class="d-flex align-items-center justify-content-end">
                                        <button class="btn btn-sm btn-outline-light me-2" @onclick="() => UpdateQuantity(item, item.Quantity - 1)">-</button>
                                        <span>@item.Quantity</span>
                                        <button class="btn btn-sm btn-outline-light ms-2" @onclick="() => UpdateQuantity(item, item.Quantity + 1)">+</button>
                                    </div>
                                </td>
                                <td data-label="Price">FCFA @item.Price.ToString("N0") XAF</td>
                                <td data-label="Remove">
                                    <a href="#" class="text-danger" @onclick:preventDefault @onclick="() => RemoveFromCart(item)">Remove</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <div class="text-end">
                    <h3>SUBTOTAL: FCFA @Subtotal.ToString("N0") XAF</h3>
                </div>
            }
            else
            {
                <div class="text-center p-4">
                    <p>Your cart is currently empty.</p>
                    <button class="btn btn-dark" @onclick='() => NavigationManager.NavigateTo("/shop")'>
                        Go to Shop
                    </button>
                </div>
            }
        </div>

        @* --- CUSTOMER DETAILS (HTML is unchanged) --- *@
        <div class="customer-details">
            <h2 class="mb-3">Customer Details</h2>
            <div class="mb-3">
                <input type="text" class="form-control form-control-dark" placeholder="Name" @bind="customerName">
            </div>
            <div class="mb-3">
                <input type="text" class="form-control form-control-dark" placeholder="Phone Number" @bind="customerPhone">
            </div>
            <div class="mb-3">
                <input type="text" class="form-control form-control-dark" placeholder="Delivery Address" @bind="customerAddress">
            </div>
            <div class="mb-3">
                <textarea class="form-control form-control-dark" rows="4" placeholder="Optional Message" @bind="optionalMessage"></textarea>
            </div>
        </div>

        @* --- CHECKOUT BUTTON (HTML is unchanged) --- *@
        <div class="d-grid gap-2 mt-4">
            <button class="btn btn-lg btn-success" disabled="@(!orderItems.Any() || string.IsNullOrWhiteSpace(customerName) || string.IsNullOrWhiteSpace(customerPhone))" @onclick="CheckoutViaWhatsApp">
                Check Out Via WhatsApp
            </button>
        </div>
    </div>
</div>

@code {
    private List<OrderItem> orderItems = new();
    private decimal Subtotal => orderItems.Sum(item => item.Price * item.Quantity);
    private string customerName;
    private string customerPhone;
    private string customerAddress;
    private string optionalMessage;

    // --- START: ADDED ---
    private List<string> availableSizes = new() { "S", "M", "L", "XL", "XXL" };
    // --- END: ADDED ---

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await StateContainer.LoadState();
            orderItems = StateContainer.CartItems;
            StateContainer.OnChange += StateHasChanged;
            StateHasChanged();
        }
    }

    private async Task CheckoutViaWhatsApp()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to place this order?");
        if (!confirmed) return;

        if (!orderItems.Any() || string.IsNullOrWhiteSpace(customerName) || string.IsNullOrWhiteSpace(customerPhone)) return;

        var orderItemsForDb = new List<OrderItem>();
        foreach (var item in orderItems)
        {
            var productFromDb = await DbContext.Products.FindAsync(item.Product.ProductId);
            if (productFromDb != null)
            {
                orderItemsForDb.Add(new OrderItem
                    {
                        Product = productFromDb,
                        Quantity = item.Quantity,
                        Price = item.Price,
                        Size = item.Size,
                        CustomName = item.CustomName,
                        CustomNumber = item.CustomNumber
                    });
            }
        }

        // --- START: COMMISSION LOGIC ---
        var commissionSetting = await DbContext.CommissionSettings.FirstOrDefaultAsync();
        if (commissionSetting == null)
        {
            commissionSetting = new CommissionSetting { CurrentRate = 0.07m };
            DbContext.CommissionSettings.Add(commissionSetting);
            await DbContext.SaveChangesAsync();
        }

        decimal orderCommission = 0;
        string referralCode = ReferralService.GetReferralCode();

        if (!string.IsNullOrEmpty(referralCode))
        {
            orderCommission = Subtotal * commissionSetting.CurrentRate;
        }
        // --- END: COMMISSION LOGIC ---

        var order = new Order
            {
                CustomerName = customerName,
                CustomerPhone = customerPhone,
                CustomerAddress = customerAddress,
                OrderDate = DateTime.UtcNow,
                OrderItems = orderItemsForDb,
                TotalAmount = Subtotal,
                ReferralCode = referralCode,
                Status = "Pending",
                CommissionAmount = orderCommission
            };

        DbContext.Orders.Add(order);
        await DbContext.SaveChangesAsync();
        OrderStateService.NotifyOrderPlaced();

        var messageBuilder = new StringBuilder();
        messageBuilder.AppendLine("Hello Maillot Store,");
        messageBuilder.AppendLine();
        messageBuilder.AppendLine($"An order has been placed with the following details (Order ID: {order.Id}):");
        messageBuilder.AppendLine();
        messageBuilder.AppendLine($"  Name: {customerName}");
        messageBuilder.AppendLine($"  Phone: {customerPhone}");
        messageBuilder.AppendLine($"  Address: {customerAddress}");
        messageBuilder.AppendLine();
        messageBuilder.AppendLine("  Order Details:");

        int itemNumber = 1;
        foreach (var item in orderItems)
        {
            messageBuilder.Append($"{itemNumber}. {item.Product.Name} (x{item.Quantity}) - Size: {item.Size}");
            if (!string.IsNullOrEmpty(item.CustomName))
            {
                messageBuilder.Append($" - Name: {item.CustomName}");
            }
            if (item.CustomNumber.HasValue)
            {
                messageBuilder.Append($" - Number: {item.CustomNumber}");
            }
            messageBuilder.AppendLine($" – FCFA {item.Price.ToString("N0")} XAF");

            string productUrl = $"{NavigationManager.BaseUri}product/{item.Product.ProductId}";
            messageBuilder.AppendLine($"    Link: {productUrl}");

            itemNumber++;
        }

        messageBuilder.AppendLine();
        messageBuilder.AppendLine($"  Total: FCFA {Subtotal.ToString("N0")} XAF");
        messageBuilder.AppendLine();
        messageBuilder.AppendLine("Thank you.");

        string whatsappMessage = Uri.EscapeDataString(messageBuilder.ToString());

        // --- START: THIS IS THE ONLY UPDATED SECTION ---
        
        // 1. Fetch the admin WhatsApp number from settings
        var adminSetting = await DbContext.AdminSettings.FirstOrDefaultAsync(s => s.Key == "AdminWhatsAppNumber");
        
        // 2. Use the number from settings, or fall back to your old number if not found.
        var adminPhoneNumber = adminSetting?.Value ?? "237671007313"; // Fallback number
        
        // 3. Clean the number (remove '+' and spaces)
        adminPhoneNumber = adminPhoneNumber.Replace("+", "").Replace(" ", "");
        
        // 4. Ensure the '237' prefix is present
        if (!adminPhoneNumber.StartsWith("237"))
        {
            adminPhoneNumber = "237" + adminPhoneNumber;
        }
        
        // 5. Build the dynamic URL
        string whatsappUrl = $"https://wa.me/{adminPhoneNumber}?text={whatsappMessage}";
        
        // --- END: UPDATED SECTION ---


        await JSRuntime.InvokeVoidAsync("open", whatsappUrl, "_blank");

        await StateContainer.ClearCart();

        NavigationManager.NavigateTo("/shop");
    }

    private async Task RemoveFromCart(OrderItem item)
    {
        await StateContainer.RemoveFromCart(item);
    }

    private async Task UpdateQuantity(OrderItem item, int quantity)
    {
        await StateContainer.UpdateCartItemQuantity(item, quantity);
    }

    // --- START: ADDED ---
    private async Task UpdateSize(OrderItem item, ChangeEventArgs e)
    {
        var newSize = e.Value.ToString();
        if (!string.IsNullOrEmpty(newSize))
        {
            // This assumes your StateContainer has a method 'UpdateCartItemSize'
            // If it is named differently (like 'UpdateSize'), please adjust this line.
            await StateContainer.UpdateCartItemSize(item, newSize);
        }
    }
    // --- END: ADDED ---

    public void Dispose()
    {
        StateContainer.OnChange -= StateHasChanged;
    }
}