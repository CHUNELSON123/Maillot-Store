@page "/influencer-dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using MaillotStore.Data
@using MaillotStore.Models  
@using MaillotStore.Services
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext DbContext
@inject OrderStateService OrderStateService
@implements IDisposable
@attribute [Authorize(Roles = "Influencer")]

<PageTitle>Influencer Dashboard</PageTitle>

<link href="css/influencer-dashboard.css" rel="stylesheet" />

@if (currentUser is not null)
{
    <div class="dashboard-container">
        <div class="welcome-header">
            <h1>WELCOME, @currentUser.FullName?.ToUpper()</h1>
        </div>

        <div class="admin-contact-info" style="text-align:center; margin-bottom: 20px;">
            <p><strong>Shop Owner Contact:</strong> <a href="tel:@adminPhoneNumber">@adminPhoneNumber</a></p>
        </div>

        <div class="referral-info">
            <p>Referral Code: @currentUser.ReferralCode</p>
            <p>Referral Link: @referralLink</p>
            <button @onclick="CopyReferralLink" class="copy-link">Copy Link</button>
            <div class="share-links">
                <span>Share Link Via</span>
                <a href="@($"https://wa.me/?text={System.Net.WebUtility.UrlEncode(referralLink)}")" target="_blank" class="social-icon"><i class="fab fa-whatsapp"></i></a>
                <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
            </div>
        </div>

        <div class="sales-section">
            <h2>Your Sales via Referral Link</h2>

            @* --- Desktop Table --- *@
            <div class="table-responsive d-none d-md-block">
                <table class="sales-table">
                    <thead>
                        <tr>
                            <th>S/N</th>
                            <th>Date and Time</th>
                            <th>Customer Name</th>
                            <th>Product(s)</th>
                            <th>Amount</th>
                            <th>Commission</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!referredOrders.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center">No sales recorded yet.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var (order, index) in referredOrders.Select((item, index) => (item, index)))
                            {
                                <tr>
                                    <td>@(index + 1)</td>
                                    <td>@order.OrderDate.AddHours(1).ToString("g")</td>
                                    <td>@order.CustomerName</td>
                                    <td>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div>@item.Product.Name</div>
                                        }
                                    </td>
                                    <td>FCFA @order.TotalAmount.ToString("N0") XAF</td>
                                    @* --- UPDATED: Use CommissionAmount stored on the order --- *@
                                    <td>FCFA @order.CommissionAmount.ToString("N0") XAF</td>
                                    <td>@(string.IsNullOrEmpty(order.Status) ? "Pending" : order.Status)</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            @* --- Mobile Cards --- *@
            <div class="d-md-none">
                @if (!referredOrders.Any())
                {
                    <p class="text-center">No sales recorded yet.</p>
                }
                else
                {
                    @foreach (var (order, index) in referredOrders.Select((item, index) => (item, index)))
                    {
                        <div class="sale-card">
                            <div class="card-header">
                                <strong>Sale #@(index + 1)</strong>
                                <span class="card-date">@order.OrderDate.AddHours(1).ToString("g")</span>
                            </div>
                            <div class="card-body">
                                <p><strong>Customer:</strong> @order.CustomerName</p>
                                <p><strong>Products:</strong></p>
                                <ul class="product-list">
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <li>@item.Product.Name</li>
                                    }
                                </ul>
                                <p><strong>Amount:</strong> FCFA @order.TotalAmount.ToString("N0") XAF</p>
                                @* --- UPDATED: Use CommissionAmount stored on the order --- *@
                                <p><strong>Commission:</strong> FCFA @order.CommissionAmount.ToString("N0") XAF</p>
                                <p><strong>Status:</strong> @(string.IsNullOrEmpty(order.Status) ? "Pending" : order.Status)</p>
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <br />
        <br />

        @* --- PERFORMANCE SUMMARY SECTION --- *@
        <div class="performance-summary">
            <h2>Your Performance:</h2>
            @* --- START: NEW LINE TO DISPLAY RATE --- *@
            <p><strong>Current Commission Rate:</strong> @(currentCommissionRate * 100)% <em class="text-muted">(Applies to new orders)</em></p>
            @* --- END: NEW LINE TO DISPLAY RATE --- *@
            <p>Total Sales Recorded: @referredOrders.Count</p>
            <p>Total Commission Earned: FCFA @totalCommission.ToString("N0") XAF</p>
            <p>Total Commission Paid: FCFA @paidCommission.ToString("N0") XAF</p>
            <p>Balance Remaining: FCFA @((totalCommission - paidCommission).ToString("N0")) XAF</p>
        </div>
    </div>
}
else
{
    <p>Loading user data...</p>
}


@code {
    private ApplicationUser? currentUser;
    private string referralLink = string.Empty;
    private List<Order> referredOrders = new();
    private decimal totalCommission = 0;
    private decimal paidCommission = 0;
    private string adminPhoneNumber = "Contact not available";

    // --- START: NEW VARIABLE ---
    private decimal currentCommissionRate; // To store the rate read from DB
    // --- END: NEW VARIABLE ---

    protected override async Task OnInitializedAsync()
    {
        OrderStateService.OnOrderPlaced += RefreshDashboardData;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = await UserManager.GetUserAsync(user);
            if (currentUser != null) // Ensure user object is loaded
            {
                await LoadSalesData(); // Load sales which uses currentUser.ReferralCode
            }
        }

        // Load Admin Phone Number (no changes needed here)
        var adminUsers = await UserManager.GetUsersInRoleAsync("Admin");
        var adminUser = adminUsers.FirstOrDefault();
        if (adminUser is not null && !string.IsNullOrEmpty(adminUser.PhoneNumber))
        {
            adminPhoneNumber = adminUser.PhoneNumber;
        }

        // --- START: NEW LOGIC TO LOAD COMMISSION RATE ---
        // Load the current commission rate setting from the database
        var setting = await DbContext.CommissionSettings.AsNoTracking().FirstOrDefaultAsync();
        if (setting != null)
        {
            // Use AsNoTracking() as we are only reading the value
            currentCommissionRate = setting.CurrentRate;
        }
        else
        {
            // Fallback rate if the setting hasn't been created in the DB yet
            currentCommissionRate = 0.07m; // Default to 7%
        }
        // --- END: NEW LOGIC TO LOAD COMMISSION RATE ---
    }

    private void RefreshDashboardData()
    {
        // Use InvokeAsync to ensure updates happen on the UI thread
        InvokeAsync(async () =>
        {
            // Reload sales data AND the commission rate in case it changed
            await LoadSalesData();
            var setting = await DbContext.CommissionSettings.AsNoTracking().FirstOrDefaultAsync();
            currentCommissionRate = setting?.CurrentRate ?? 0.07m; // Update rate display
            StateHasChanged(); // Tell Blazor to re-render the component
        });
    }

    private async Task LoadSalesData()
    {
        if (currentUser?.ReferralCode is not null)
        {
            var baseUri = NavigationManager.BaseUri;
            referralLink = $"{baseUri}?ref={currentUser.ReferralCode}";

            var influencerCode = currentUser.ReferralCode.Trim();
            referredOrders = await DbContext.Orders
                .AsNoTracking()
                .Include(o => o.OrderItems).ThenInclude(oi => oi.Product)
                .Where(o => o.ReferralCode != null &&
                            o.ReferralCode.Trim().ToUpper() == influencerCode.ToUpper() &&
                            o.IsVisibleToInfluencer)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            // --- UPDATED: Calculate using the CommissionAmount stored on each order ---
            totalCommission = referredOrders.Sum(o => o.CommissionAmount);
            paidCommission = referredOrders.Where(o => o.Status == "Paid").Sum(o => o.CommissionAmount);
            // --- END: UPDATED ---
        }
        else
        {
             // Clear data if user has no referral code (or isn't loaded yet)
            referralLink = string.Empty;
            referredOrders = new List<Order>();
            totalCommission = 0;
            paidCommission = 0;
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        var orderToHide = await DbContext.Orders.FindAsync(orderId);
        if (orderToHide != null)
        {
            orderToHide.IsVisibleToInfluencer = false;
            await DbContext.SaveChangesAsync();
            await LoadSalesData(); // Refresh the list after hiding
            StateHasChanged(); // Update UI
        }
    }

    private async Task CopyReferralLink()
    {
         try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", referralLink);
            // Optional: You could add a temporary message here saying "Link Copied!"
        }
        catch (JSException ex)
        {
            Console.WriteLine($"Clipboard error: {ex.Message}"); // Log the error for debugging
             // Optional: Show an error message to the user if copying fails
        }
    }

    public void Dispose()
    {
        // Unsubscribe from the event when the component is destroyed
        OrderStateService.OnOrderPlaced -= RefreshDashboardData;
    }
}