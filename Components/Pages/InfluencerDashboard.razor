@page "/influencer-dashboard"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using MaillotStore.Data
@using MaillotStore.Models
@using MaillotStore.Services
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext DbContext
@inject OrderStateService OrderStateService
@implements IDisposable
@attribute [Authorize(Roles = "Influencer")]

<PageTitle>Influencer Dashboard</PageTitle>

@* --- ADD A STYLESHEET REFERENCE --- *@
<link href="css/influencer-dashboard.css" rel="stylesheet" />

@if (currentUser is not null)
{
    <div class="dashboard-container">
        @* --- WELCOME HEADER --- *@
        <div class="welcome-header">
            <h1>WELCOME, @currentUser.FullName?.ToUpper()</h1>
        </div>

        @* --- REFERRAL LINK SECTION (Unchanged) --- *@
        <div class="referral-info">
            <p>Referral Code: @currentUser.ReferralCode</p>
            <p>Referral Link: @referralLink</p>
            <button @onclick="CopyReferralLink" class="copy-link">Copy Link</button>
            <div class="share-links">
                <span>Share Link Via</span>
                <a href="@($"https://wa.me/?text={System.Net.WebUtility.UrlEncode(referralLink)}")" target="_blank" class="social-icon"><i class="fab fa-whatsapp"></i></a>
                <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
            </div>
        </div>

        @* --- START: UPDATED SALES SECTION FOR RESPONSIVENESS --- *@
        <div class="sales-section">
            <h2>Your Sales via Referral Link</h2>

            @* --- Desktop Table (Hidden on Mobile) --- *@
            <div class="table-responsive d-none d-md-block">
                <table class="sales-table">
                    <thead>
                        <tr>
                            <th>S/N</th>
                            <th>Date and Time</th>
                            <th>Customer Name</th>
                            <th>Product(s)</th>
                            <th>Amount</th>
                            <th>Commission</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!referredOrders.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center">No sales recorded yet.</td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var (order, index) in referredOrders.Select((item, index) => (item, index)))
                            {
                                <tr>
                                    <td>@(index + 1)</td>
                                    <td>@order.OrderDate.AddHours(1).ToString("g")</td>
                                    <td>@order.CustomerName</td>
                                    <td>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <div>@item.Product.Name</div>
                                        }
                                    </td>
                                    <td>FCFA @order.TotalAmount.ToString("N0") XAF</td>
                                    <td>FCFA @((order.TotalAmount * 0.07m).ToString("N0")) XAF</td>
                                    <td>@(string.IsNullOrEmpty(order.Status) ? "Pending" : order.Status)</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            @* --- Mobile Cards (Visible only on Mobile) --- *@
            <div class="d-md-none">
                @if (!referredOrders.Any())
                {
                    <p class="text-center">No sales recorded yet.</p>
                }
                else
                {
                    @foreach (var (order, index) in referredOrders.Select((item, index) => (item, index)))
                    {
                        <div class="sale-card">
                            <div class="card-header">
                                <strong>Sale #@(index + 1)</strong>
                                <span class="card-date">@order.OrderDate.AddHours(1).ToString("g")</span>
                            </div>
                            <div class="card-body">
                                <p><strong>Customer:</strong> @order.CustomerName</p>
                                <p><strong>Products:</strong></p>
                                <ul class="product-list">
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <li>@item.Product.Name</li>
                                    }
                                </ul>
                                <p><strong>Amount:</strong> FCFA @order.TotalAmount.ToString("N0") XAF</p>
                                <p><strong>Commission:</strong> FCFA @((order.TotalAmount * 0.07m).ToString("N0")) XAF</p>
                                <p><strong>Status:</strong> @(string.IsNullOrEmpty(order.Status) ? "Pending" : order.Status)</p>
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">Delete</button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        @* --- END: UPDATED SALES SECTION --- *@

        <br />
        <br />

        @* --- PERFORMANCE SUMMARY SECTION (Unchanged) --- *@
        <div class="performance-summary">
            <h2>Your Performance:</h2>
            <p>Total Sales: @referredOrders.Count</p>
            <p>Commission Earned: FCFA @totalCommission.ToString("N0") XAF</p>
            <p>Commission Paid: FCFA @paidCommission.ToString("N0") XAF</p>
            <p>Balance Remaining: FCFA @((totalCommission - paidCommission).ToString("N0")) XAF</p>
        </div>
    </div>
}
else
{
    <p>Loading user data...</p>
}


@code {
    private ApplicationUser? currentUser;
    private string referralLink = string.Empty;
    private List<Order> referredOrders = new();
    private decimal totalCommission = 0;
    private decimal paidCommission = 0;

    protected override async Task OnInitializedAsync()
    {
        OrderStateService.OnOrderPlaced += RefreshDashboardData;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            currentUser = await UserManager.GetUserAsync(user);
            await LoadSalesData();
        }
    }

    private void RefreshDashboardData()
    {
        InvokeAsync(async () =>
        {
            await LoadSalesData();
            StateHasChanged();
        });
    }

    private async Task LoadSalesData()
    {
        if (currentUser?.ReferralCode is not null)
        {
            var baseUri = NavigationManager.BaseUri;
            referralLink = $"{baseUri}?ref={currentUser.ReferralCode}";

            var influencerCode = currentUser.ReferralCode.Trim();
            referredOrders = await DbContext.Orders
                .AsNoTracking()
                .Include(o => o.OrderItems).ThenInclude(oi => oi.Product)
                .Where(o => o.ReferralCode != null &&
                            o.ReferralCode.Trim().ToUpper() == influencerCode.ToUpper() &&
                            o.IsVisibleToInfluencer)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            totalCommission = referredOrders.Sum(o => o.TotalAmount * 0.07m);
            paidCommission = referredOrders.Where(o => o.Status == "Paid").Sum(o => o.TotalAmount * 0.07m);
        }
    }

    private async Task DeleteOrder(int orderId)
    {
        var orderToHide = await DbContext.Orders.FindAsync(orderId);
        if (orderToHide != null)
        {
            orderToHide.IsVisibleToInfluencer = false;
            await DbContext.SaveChangesAsync();
            await LoadSalesData();
        }
    }

    private async Task CopyReferralLink()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", referralLink);
    }

    public void Dispose()
    {
        OrderStateService.OnOrderPlaced -= RefreshDashboardData;
    }
}