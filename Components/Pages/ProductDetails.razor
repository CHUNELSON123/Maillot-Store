@page "/product/{ProductId:int}"
@using MaillotStore.Models
@using MaillotStore.Components.Account.Shared
@using MaillotStore.Data
@using Microsoft.EntityFrameworkCore
@using MaillotStore.Services
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject ICartService CartService

<PageTitle>@product?.Name</PageTitle>

<div class="container my-5">
    @if (product == null)
    {
        <div class="text-center">
            <p><em>Loading product...</em></p>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-6">
                <div class="pd-gallery-container">
                    <div class="pd-main-image mb-2">
                        <img src="@currentImageUrl" class="img-fluid" alt="Main image of @product.Name">
                    </div>
                    <div class="pd-thumbnail-images">
                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                        {
                            <img src="@product.ImageUrl" class="img-thumbnail @(currentImageUrl == product.ImageUrl ? "active" : "")" alt="Thumbnail 1" @onclick="() => SetMainImage(product.ImageUrl)">
                        }
                        @if (!string.IsNullOrEmpty(product.ImageUrl2))
                        {
                            <img src="@product.ImageUrl2" class="img-thumbnail @(currentImageUrl == product.ImageUrl2 ? "active" : "")" alt="Thumbnail 2" @onclick="() => SetMainImage(product.ImageUrl2)">
                        }
                        @if (!string.IsNullOrEmpty(product.ImageUrl3))
                        {
                            <img src="@product.ImageUrl3" class="img-thumbnail @(currentImageUrl == product.ImageUrl3 ? "active" : "")" alt="Thumbnail 3" @onclick="() => SetMainImage(product.ImageUrl3)">
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="pd-info-container">
                    <h1 class="pd-name">@product.Name</h1>
                    <h2 class="pd-price">FCFA @product.Price.ToString("N0")</h2>
                    <p class="pd-season">@product.Season</p>
                    <hr class="pd-divider" />
                    <div class="pd-description">
                        <p>@product.Description</p>
                    </div>
                    <hr class="pd-divider" />

                    <div class="customization-info text-muted mb-4">
                        <h2 style="color: white;">Customization Info</h2>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-8 mb-3 mb-md-0">
                            <input type="text" class="form-control form-control-dark-uniform" placeholder="Player Name" @bind="customName" />
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control form-control-dark-uniform" placeholder="Number" @bind="customNumber" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-8 mb-3 mb-md-0">
                            <select class="form-select form-control-dark-uniform" @bind="selectedSize">
                                <option value="" disabled selected>Size</option>
                                @foreach (var size in availableSizes)
                                {
                                    <option value="@size">@size</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-4">
                            <input type="number" class="form-control form-control-dark-uniform" placeholder="Quantity" @bind="quantity" />
                        </div>
                    </div>

                    <div class="d-grid gap-3 mt-5">
                        <button class="btn btn-lg btn-dark-uniform" @onclick="AddToCart">
                            <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                        </button>
                        <button class="btn btn-lg btn-dark-uniform" @onclick="OrderNow">
                            Order Now
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <hr class="my-5" />
        <section class="related-products">
            <h2 class="mb-4">You may also like</h2>
            @if (relatedProducts.Any())
            {
                <div class="row g-4">
                    @foreach (var relatedProduct in relatedProducts)
                    {
                        <div class="col-6 col-md-4 col-lg-4">
                            <ProductCard Product="relatedProduct" />
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No related products found.</p>
            }
        </section>
    }
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }

    private Product? product;
    private List<Product> relatedProducts = new();
    private string? currentImageUrl;
    private string customName = string.Empty;
    private int? customNumber;
    private string? selectedSize;
    private int quantity = 1;
    private List<string> availableSizes = new() { "S", "M", "L", "XL", "XXL" };

    protected override async Task OnParametersSetAsync()
    {
        product = await DbContext.Products.FindAsync(ProductId);

        if (product != null)
        {
            currentImageUrl = product.ImageUrl;
            await LoadRelatedProducts();
            StateHasChanged();
        }
    }

    private async Task LoadRelatedProducts()
    {
        if (product is null) return;

        var candidates = await DbContext.Products
            .Where(p => p.Category == product.Category && p.ProductId != ProductId)
            .ToListAsync();

        var scoredProducts = candidates.Select(p => new
        {
            Product = p,
            Score = CalculateNameSimilarity(product.Name, p.Name) + CalculatePriceSimilarity(product.Price, p.Price)
        })
        .OrderByDescending(x => x.Score)
        .Take(9)
        .Select(x => x.Product)
        .ToList();

        relatedProducts = scoredProducts;
    }

    private double CalculateNameSimilarity(string name1, string name2)
    {
        if (string.IsNullOrEmpty(name1) || string.IsNullOrEmpty(name2)) return 0;

        var name1Words = name1.ToLower().Split(' ').ToHashSet();
        var name2Words = name2.ToLower().Split(' ');

        double commonWords = name1Words.Intersect(name2Words).Count();

        return commonWords;
    }

    private double CalculatePriceSimilarity(decimal price1, decimal price2)
    {
        var difference = Math.Abs(price1 - price2);
        return 1.0 / (1.0 + (double)difference / 1000.0);
    }

    private void SetMainImage(string? imageUrl)
    {
        currentImageUrl = imageUrl;
    }

    private void AddToCart()
    {
        if (product != null)
        {
            CartService.AddToCart(product);
            NavigationManager.NavigateTo("/checkout");
        }
    }

    private void OrderNow()
    {
        if (product != null)
        {
            CartService.AddToCart(product);
            NavigationManager.NavigateTo("/checkout");
        }
    }
}